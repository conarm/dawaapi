import SynthesizerNode from "./components/nodes/SynthesizerNode.svelte";
import AudioOutNode from "./components/nodes/AudioOutNode.svelte";
import PatternNode from "./components/nodes/PatternNode.svelte";
import DelayNode from "./components/nodes/DelayNode.svelte";
import ReverbNode from "./components/nodes/ReverbNode.svelte";
import { Position, type Edge } from "@xyflow/svelte";
import type { OmniOscillatorType } from "tone/build/esm/source/oscillator/OscillatorInterface";
import PhaserNode from "./components/nodes/PhaserNode.svelte";
import type { GenericWrapper } from "./wrappers/GenericWrapper";

// Initialise wrapper storage dictionary
export const wrapperMap = new Map<string, GenericWrapper>();

// Node types/components - indexed using each Nodes' type property to find the appropriate component
export const nodeTypes = {
  synth: SynthesizerNode,
  "audio-out": AudioOutNode,
  pattern: PatternNode,
  delay: DelayNode,
  reverb: ReverbNode,
  phaser: PhaserNode,
};

// Nodes and groups - Use for the node menu
export const groupedNodeTypes = {
  "Audio Generators": {
    synth: nodeTypes.synth
  },
  "Effects": {
    reverb: nodeTypes.reverb,
    delay: nodeTypes.delay,
    phaser: nodeTypes.phaser
  },
  "Controls": {
    pattern: nodeTypes.pattern
  },
};

// Default values for nodes
export const nodeDefaults = {
  sourcePosition: Position.Right,
  targetPosition: Position.Left,
};

// Set default Tone.js BPM - relevant for control signals
export const defaultBPM = 150;

// Tone.JS pitch options
export const pitches = [
  "C0",
  "D0",
  "E0",
  "F0",
  "G0",
  "A0",
  "B0",
  "C1",
  "D1",
  "E1",
  "F1",
  "G1",
  "A1",
  "B1",
  "C2",
  "D2",
  "E2",
  "F2",
  "G2",
  "A2",
  "B2",
  "C3",
  "D3",
  "E3",
  "F3",
  "G3",
  "A3",
  "B3",
  "C4",
  "D4",
  "E4",
  "F4",
  "G4",
  "A4",
  "B4",
  "C5",
  "D5",
  "E5",
  "F5",
  "G5",
  "A5",
  "B5",
  "C6",
  "D6",
  "E6",
  "F6",
  "G6",
  "A6",
  "B6",
  "C7",
  "D7",
  "E7",
  "F7",
  "G7",
  "A7",
  "B7",
  "C8",
  "D8",
  "E8",
  "F8",
  "G8",
  "A8",
  "B8",
];

// Tone.js oscillator shape options
export const shapes: OmniOscillatorType[] = [
  "sine",
  "square",
  "triangle",
  "sawtooth",
];

// Tone.js pattern options
export const patterns: { [name: string] : any[]; } = {
  "pattern1": [
    { time: 0, note: "C4", dur: "4n" },
    { time: "4n", note: "D4", dur: "4n" },
    { time: "2n", note: "E4", dur: "4n" },
    { time: "2n + 4n", note: "F4", dur: "8n" }
  ],
  "pattern2": [ 
    { time: 0, note: "C4", dur: "4n" },
    { time: "1n", note: "G4", dur: "4n" },
    { time: "2n", note: "E4", dur: "4n" },
    { time: "3n", note: "G4", dur: "4n" },
  ],
  "pattern3": [
    { time: 0, note: "C4", dur: "4n" },
    { time: "2n", note: "G4", dur: "16n" },
  ],
  "pattern4": [
    { time: 0, note: "C4", dur: "4n" },
    { time: "2n", note: "G4", dur: "16n" },
  ],
  "pattern5": [
    { time: 0, note: "C4", dur: "4n" },
    { time: "2n", note: "G4", dur: "16n" },
  ],
  "pattern6": [
    { time: 0, note: "C4", dur: "4n" },
    { time: "2n", note: "G4", dur: "16n" },
  ],
  "pattern7": [
    { time: 0, note: "C4", dur: "4n" },
    { time: "2n", note: "G4", dur: "16n" },
  ],
  "pattern8": [
    { time: 0, note: "C4", dur: "4n" },
    { time: "2n", note: "G4", dur: "16n" },
  ],
  "pattern9": [
    { time: 0, note: "C4", dur: "4n" },
    { time: "2n", note: "G4", dur: "16n" },
  ],
}

// HTML content for the help modal
export const helpModalContent = {
  title: `<h1>Help</h1>`,
  body: `
    <h2>Usage</h2>

<p>A range of nodes can be added to the canvas using the menu and deleted using DELETE or BACKSPACE. Signals can be sent between them. Sounds can be generated by building a network of these nodes and connecting them to an audio output. A help button in the top right-hand corner provides usage instructions. Additionally, each node has an information button for specific node information.</p>

<h2>Signals</h2>

There are two types of signals:

<ul>
<li><b>Audio signal</b>: Represents a constant stream of audio, like a constant beep or a song</li>
<li><b>Control signal</b>: Represents a signal that controls the parameters of some other node</li>
</ul>

<h2>Nodes</h2>

There are three main categories of nodes:
<ul>
<li>Audio generator nodes [ Input: None, or Control Signal. Output: Audio Signal ]</li>
<ul>
<li><b>Synth</b>: Sends an audio signal of a single constant note (or a looping pattern if it takes an input from a pattern node)</li>
</ul>
<li>Effect nodes [ Input: Audio Signal. Output: Audio Signal ]</li>
<ul>
<li><b>Reverb</b>: Adds reverb to an audio signal</li>
<li><b>Delay</b>: Adds delay to an audio signal</li>
<li><b>Phaser</b> Adds phaser to an audio signal</li>
</ul>
<li>Control nodes [ Input: None. Output: Control Signal ]</li>
<ul>
<li><b>Pattern</b>: When connected to a synthesizer, a control signal will make the synthesizer play a predefined pattern of notes</li>
</ul>
</ul>

There is also an <b>Audio Output</b> node - any audio signal connected this will be made audible to the user.

Nodes can be connected by dragging the connection dots to the left and right of each node. The left connection dot is an input and the right connection dot is an output. To connect any node X to any node Y, click and drag from node X's right-hand dot (node X's output) to node Y's left-hand dot (node Y's input).
  `
}
